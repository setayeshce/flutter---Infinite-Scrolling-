import 'package:flutter/material.dart';

// https://stackoverflow.com/a/68957365/9449426
// https://gist.github.com/NearHuscarl/6ae326a7422736d6011ee1006819b123

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: InifiniteList<String>(
          onRequest: requestItems,
          itemBuilder: (context, item, index) => Container(
            padding: const EdgeInsets.all(30),
            color:
                index % 2 == 0 ? Colors.purple.shade100 : Colors.lime.shade100,
            child: Text(item, style: Theme.of(context).textTheme.headline6),
          ),
        ),
      ),
    );
  }
}

Future<List<String>> requestItems(int nextIndex) {
  const pageSize = 15;
  final result = nextIndex > 100
      ? <String>[]
      : List<String>.generate(pageSize, (i) => "Item: ${nextIndex + i + 1}");
  return Future<List<String>>.delayed(
    const Duration(milliseconds: 500),
    () => result,
  );
}

// ------------
// InfiniteList
// ------------

// ignore_for_file: prefer_generic_function_type_aliases
typedef Future<List<T>> RequestFn<T>(int nextIndex);
typedef Widget ItemBuilder<T>(BuildContext context, T item, int index);

class InifiniteList<T> extends StatefulWidget {
  final RequestFn<T> onRequest;
  final ItemBuilder<T> itemBuilder;

  const InifiniteList(
      {Key? key, required this.onRequest, required this.itemBuilder})
      : super(key: key);

  @override
  _InifiniteListState<T> createState() => _InifiniteListState<T>();
}

class _InifiniteListState<T> extends State<InifiniteList<T>> {
  List<T> items = [];
  bool end = false;

  _getMoreItems() async {
    final moreItems = await widget.onRequest(items.length);
    if (!mounted) return;

    if (moreItems.isEmpty) {
      setState(() => end = true);
      return;
    }
    setState(() => items = [...items, ...moreItems]);
  }

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemBuilder: (context, index) {
        if (index < items.length) {
          return widget.itemBuilder(context, items[index], index);
        } else if (index == items.length && end) {
          return const Center(child: Text('End of list'));
        } else {
          _getMoreItems();
          return const SizedBox(
            height: 80,
            child: Center(child: CircularProgressIndicator()),
          );
        }
      },
      itemCount: items.length + 1,
    );
  }
}
